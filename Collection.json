{
	"info": {
		"_postman_id": "793685b5-703e-470e-95e6-7be5666cf575",
		"name": "CxP Payment Process",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "XSRF Token Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c4274238-262f-4f73-ad75-a3b78d787338",
						"exec": [
							"let oldToken = pm.environment.get(\"XSRFToken\");",
							"",
							"var html = cheerio(responseBody);",
							"var text = html.find('script').text();",
							"var str = text.substr(text.indexOf('CSRF_TOKEN'))",
							"",
							"let token = str.substring(14,(str.length-2));",
							"",
							"",
							"pm.environment.set(\"XSRFToken\", token);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    ",
							"});",
							"",
							"pm.test(\"New Token Generated\", function() {",
							"    pm.expect(oldToken).to.not.eql(pm.environment.get(\"XSRFToken\"));",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"postman.setNextRequest(\"Hexea Session Cookie Copy\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://login.connexpoint{{env}}.com/",
					"protocol": "https",
					"host": [
						"login",
						"connexpoint{{env}}",
						"com"
					],
					"path": [
						""
					]
				},
				"description": "Get XSRF Token"
			},
			"response": []
		},
		{
			"name": "Hexea Session Cookie Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "57d6fb3a-108b-408a-a335-2a830554e5cd",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4ac4cc0b-7573-466e-9b81-c8aa640b7e20",
						"exec": [
							"let jsonData = pm.response.json();",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Cookie Success\", function () {",
							"   pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"No Errors Returned\", function () {",
							"    pm.expect(jsonData.error).to.eql(null);",
							"});",
							"",
							"pm.test(\"Password Expired\", function () {",
							"   pm.expect(jsonData.passwordExpired).to.eql(false);",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"Correct Email Returned\", function() {",
							"    pm.expect(jsonData.email).to.eql(pm.environment.get(\"email\"));",
							"});",
							"",
							"pm.test(\"Invalid Email or Password Sent\", function () {",
							"   pm.expect(jsonData.success).to.eql(false);",
							"   pm.expect(jsonData.error).to.eql(\"Email or password incorrect\");",
							"});",
							"",
							"",
							"postman.setNextRequest(\"Get Access Token Copy\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-CSRF-TOKEN",
						"value": "{{XSRFToken}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"returnUrl\" : \"\",\r\n  \"email\" : \"{{email}}\",\r\n  \"password\" : \"{{password}}\"\r\n}"
				},
				"url": {
					"raw": "https://login.connexpoint{{env}}.com/login",
					"protocol": "https",
					"host": [
						"login",
						"connexpoint{{env}}",
						"com"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Access Token Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "64766bee-e161-4cf4-913a-23596280a69b",
						"exec": [
							"let oldToken = pm.environment.get(\"accessToken\");",
							"",
							"let response = postman.getResponseHeader(\"Location\");",
							"",
							"let start = response.indexOf('Bearer&access_token=');",
							"let end = response.indexOf('expires_in');",
							"",
							"let accessToken = response.substring(start+20, end-1);",
							"",
							"pm.environment.set(\"accessToken\", accessToken);",
							"",
							"pm.test(\"Status Code 302 Returned\", function() {",
							"    pm.response.to.have.status(302);",
							"})",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"New Token Generated\", function() {",
							"    pm.expect(oldToken).to.not.eql(pm.environment.get(\"accessToken\"));",
							"});",
							"",
							"",
							"",
							"postman.setNextRequest(\"Get User ID Copy\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://login.connexpoint{{env}}.com/connect/authorize?client_id=paybutton&redirect_uri=https%3A%2F%2Fpaybutton.connexpoint{{env}}.com%2Fauth-complete&response_type=token&scope=profile%20email%20payer%20add_password%20openid&prompt=none&state=12345&nonce=1234",
					"protocol": "https",
					"host": [
						"login",
						"connexpoint{{env}}",
						"com"
					],
					"path": [
						"connect",
						"authorize"
					],
					"query": [
						{
							"key": "client_id",
							"value": "paybutton"
						},
						{
							"key": "redirect_uri",
							"value": "https%3A%2F%2Fpaybutton.connexpoint{{env}}.com%2Fauth-complete"
						},
						{
							"key": "response_type",
							"value": "token"
						},
						{
							"key": "scope",
							"value": "profile%20email%20payer%20add_password%20openid"
						},
						{
							"key": "prompt",
							"value": "none"
						},
						{
							"key": "state",
							"value": "12345"
						},
						{
							"key": "nonce",
							"value": "1234"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User ID Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4c653a0d-4aab-4ad4-9a28-1407f4cffc36",
						"exec": [
							"let jsonData = JSON.parse(responseBody);",
							"let userID = jsonData.sub;",
							"",
							"let oldToken = pm.environment.get(\"userID\");",
							"",
							"pm.environment.set(\"userId\", userID);",
							"",
							"pm.test(\"Status Code 200 Returned\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"New User ID Generated\", function() {",
							"    pm.expect(oldToken).to.not.eql(pm.environment.get(\"userID\"));",
							"});",
							"",
							"pm.test(\"Name is Correct\", function () {",
							"   pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\")); ",
							"});",
							"",
							"pm.test(\"Email is Correct\", function () {",
							"   pm.expect(jsonData.email).to.eql(pm.environment.get(\"email\")); ",
							"});",
							"",
							"",
							"",
							"postman.setNextRequest(\"Get Merchant ID Copy\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://login.connexpoint{{env}}.com/api/userinfo",
					"protocol": "https",
					"host": [
						"login",
						"connexpoint{{env}}",
						"com"
					],
					"path": [
						"api",
						"userinfo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Merchant ID Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5cabe658-63cd-4d41-9b90-e2a7d5e9f1c5",
						"exec": [
							"let jsonData = JSON.parse(responseBody);",
							"",
							"let merchantIdentString = jsonData.merchantIdentString;",
							"let merchantID = jsonData.merchantID;",
							"",
							"console.log(\"Merchant Ident String: \" +merchantIdentString);",
							"console.log(\"Merchant ID: \" + merchantID);",
							"",
							"pm.environment.set(\"merchantIdentString\", merchantIdentString);",
							"pm.environment.set(\"merchantID\", merchantID);",
							"",
							"pm.test(\"Status Code 200 Returned\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"New Merchant Ident String Generated\", function() {",
							"    pm.expect(oldToken).to.not.eql(pm.environment.get(\"merchantIdentString\"));",
							"});",
							"",
							"pm.test(\"New Merchant ID Generated\", function() {",
							"    pm.expect(oldMerchantID).to.not.eql(pm.environment.get(\"merchantID\"));",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"postman.setNextRequest(\"Tokenize Copy\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.connexpoint{{env}}.com/customers/{{PCCT}}/merchantinfo",
					"protocol": "https",
					"host": [
						"api",
						"connexpoint{{env}}",
						"com"
					],
					"path": [
						"customers",
						"{{PCCT}}",
						"merchantinfo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Tokenize Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bb6dab07-cee9-4685-98da-bd3db80310bc",
						"exec": [
							"let jsonData = JSON.parse(responseBody);",
							"",
							"let oldToken = pm.environment.get(\"paymentMethodToken\");",
							"",
							"let oldName = pm.environment.get(\"name\");",
							"",
							"let oldAddress = pm.environment.get(\"addressLine1\");",
							"",
							"let oldPostal = pm.environment.get(\"postalCode\");",
							"",
							"postman.setEnvironmentVariable(\"paymentMethodToken\", jsonData.paymentMethodToken);",
							"",
							"postman.setEnvironmentVariable(\"name\", jsonData.nameOnCard);",
							"",
							"postman.setEnvironmentVariable(\"addressLine1\", jsonData.addressLine1);",
							"",
							"postman.setEnvironmentVariable(\"postalCode\", jsonData.postalCode);",
							"",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status code is not 200\", function () {",
							"    pm.response.to.not.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"Test Environment\", function() {",
							"    pm.expect(jsonData.isTest).to.eql(true);",
							"});",
							"",
							"pm.test(\"Card Type Returned\", function() {",
							"    pm.expect(jsonData.brand).to.eql(\"visa\");",
							"});",
							"",
							"pm.test(\"New Token Generated\", function() {",
							"    pm.expect(oldToken).to.not.eql(pm.environment.get(\"paymentMethodToken\"));",
							"});",
							"",
							"pm.test(\"New Name on Card\", function() {",
							"    pm.expect(oldName).to.not.eql(pm.environment.get(\"name\"));",
							"});",
							"",
							"pm.test(\"New Address Line 1\", function() {",
							"    pm.expect(oldAddress).to.not.eql(pm.environment.get(\"addressLine1\"));",
							"});",
							"",
							"pm.test(\"New Postal Code\", function() {",
							"    pm.expect(oldPostal).to.not.eql(pm.environment.get(\"postalCode\"));",
							"});",
							"",
							"postman.setNextRequest(\"Payments Copy\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "69f21415-33d4-4a66-bde4-17b3018e4add",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "PCCT",
						"value": "{{PCCT}}"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"nameOnCard\": \"{{name}}\",\n\t\"cardNumber\": \"4111111111111111\",\n\t\"expireMonth\": \"02\",\n\t\"expireYear\": \"22\",\n\t\"addressLine1\": \"{{addressLine1}}\",\n\t\"postalCode\": \"{{postalCode}}\"\n}"
				},
				"url": {
					"raw": "https://processor.connexpoint{{env}}.com/tokenize",
					"protocol": "https",
					"host": [
						"processor",
						"connexpoint{{env}}",
						"com"
					],
					"path": [
						"tokenize"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a6c0524f-5b6a-443c-94ed-86003fa0593d",
						"exec": [
							"let jsonData = JSON.parse(responseBody);",
							"",
							"",
							"let oldReference = pm.environment.get(\"paymentReference\");",
							"",
							"let oldPaymentID = pm.environment.get(\"paymentID\");",
							"",
							"let oldPaymentItemID = pm.environment.get(\"paymentItemID\");",
							"",
							"postman.setEnvironmentVariable(\"paymentReference\", jsonData.paymentRef);",
							"",
							"postman.setEnvironmentVariable(\"paymentID\", jsonData.paymentID);",
							"",
							"postman.setEnvironmentVariable(\"paymentItemID\", jsonData.items[0].paymentItemID);",
							"",
							"",
							"",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"New Payment Reference Generated\", function() {",
							"    pm.expect(oldReference).to.not.eql(pm.environment.get(\"paymentReference\"));",
							"});",
							"",
							"pm.test(\"New Payment ID Generated\", function() {",
							"    pm.expect(oldPaymentID).to.not.eql(pm.environment.get(\"paymentID\"));",
							"});",
							"",
							"pm.test(\"New Payment Item ID Generated\", function() {",
							"    pm.expect(oldPaymentItemID).to.not.eql(pm.environment.get(\"paymentItemID\"));",
							"});",
							"",
							"pm.test(\"Status is Created\", function() {",
							"    pm.expect(jsonData.status).to.eql(\"Created\");",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"postman.setNextRequest(\"Allocate Copy\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "PCCT",
						"value": "{{PCCT}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": 6.40,\n    \"invoiceReference\": \"12345678\",\n    \"noteToPayer\": \"This is a test payment.\",\n    \"items\": \n    [\n      {\n        \"orderReferenceID\": \"87654321\",\n        \"description\": \"Test item\",\n        \"extendedPrice\": 6.00,\n        \"extendedTax\": 0.40,\n        \"productCode\": \"SKU123\",\n        \"accountCode\": \"account-code-1\",\n        \"payeeID\": \"11\",\n        \"payeeName\": \"{{name}}\",\n        \"quantity\": 1\n      }\n    ]\n}"
				},
				"url": {
					"raw": "https://pay.connexpoint{{env}}.com/v1/payments/new",
					"protocol": "https",
					"host": [
						"pay",
						"connexpoint{{env}}",
						"com"
					],
					"path": [
						"v1",
						"payments",
						"new"
					]
				}
			},
			"response": []
		},
		{
			"name": "Allocate Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1505b962-b2d0-45c8-9b56-9126bafa1d9a",
						"exec": [
							"let jsonData = JSON.parse(responseBody);",
							"",
							"",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 2000ms\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"Status is Success\", function() {",
							"    pm.expect(jsonData.Status).to.eql(\"Success\");",
							"});",
							"",
							"",
							"postman.setNextRequest(\"Execute Payment Copy\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "PCCT",
						"value": "{{PCCT}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer  {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"paymentRef\": \"{{paymentReference}}\",\r\n        \"merchantIdentString\": \"{{merchantIdentString}}\",\r\n        \"MerchantID\": \"{{merchantID}}\",\r\n        \"paymentMethodToken\": \"{{paymentMethodToken}}\",\r\n        \"total\": 6.40,\r\n        \"payerID\": \"{{userId}}\",\r\n        \"firstName\": \"\",\r\n        \"lastName\": \"\",\r\n        \"email\": \"{{email}}\"\r\n}"
				},
				"url": {
					"raw": "https://pay.connexpoint{{env}}.com/v1/payments/{{paymentID}}/allocate",
					"protocol": "https",
					"host": [
						"pay",
						"connexpoint{{env}}",
						"com"
					],
					"path": [
						"v1",
						"payments",
						"{{paymentID}}",
						"allocate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Execute Payment Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "60a1f2ca-0566-4ec1-9457-d6ca95f75d27",
						"exec": [
							"let jsonData = JSON.parse(responseBody);",
							"",
							"let oldPaymentItemID = pm.environment.get(\"paymentItemID\");",
							"",
							"postman.setEnvironmentVariable(\"paymentItemID\", jsonData.items[0].paymentItemID);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status code is not 200\", function () {",
							"    pm.response.to.not.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"pm.test(\"Test Environment\", function () {",
							"    pm.expect(jsonData.isTest).to.eql(true);",
							"});",
							"",
							"pm.test(\"New Payment Item ID Generated\", function () {",
							"    pm.expect(oldPaymentItemID).to.not.eql(pm.environment.get(\"paymentItemID\"));",
							"});",
							"",
							"pm.test(\"Status is Success\", function () {",
							"    pm.expect(jsonData.status).to.eql(\"Success\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "PCCT",
						"value": "{{PCCT}}"
					},
					{
						"key": "Authorization",
						"value": "{{Authorization}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"amount\": 6.40\n}"
				},
				"url": {
					"raw": "https://pay.connexpoint{{env}}.com/v1/payments/{{paymentID}}/execute",
					"protocol": "https",
					"host": [
						"pay",
						"connexpoint{{env}}",
						"com"
					],
					"path": [
						"v1",
						"payments",
						"{{paymentID}}",
						"execute"
					]
				}
			},
			"response": []
		}
	]
}